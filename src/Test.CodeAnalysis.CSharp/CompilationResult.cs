using MaSch.Test.CodeAnalysis.CSharp.Validators;
using Microsoft.CodeAnalysis;
using System.Collections.Immutable;

namespace MaSch.Test.CodeAnalysis.CSharp;

/// <summary>
/// Represents the result of <see cref="ICompilationBuilder{TBuilder}.Build"/>.
/// </summary>
public class CompilationResult
{
    internal CompilationResult(
        Compilation initialCompilation,
        Compilation finalCompilation,
        ImmutableArray<Diagnostic> diagnostics,
        ImmutableArray<GeneratedSourceResult> generatedSourceResults)
    {
        InitialCompilation = initialCompilation;
        FinalCompilation = finalCompilation;
        Diagnostics = diagnostics;
        GeneratedSourceResults = generatedSourceResults;
    }

    /// <summary>
    /// Gets the compilation before executing any source generators.
    /// </summary>
    public Compilation InitialCompilation { get; }

    /// <summary>
    /// Gets the compilation after executing all source generators.
    /// </summary>
    public Compilation FinalCompilation { get; }

    /// <summary>
    /// Gets the diagnostics produced by the compilation, source generators and analyzers.
    /// </summary>
    public ImmutableArray<Diagnostic> Diagnostics { get; }

    /// <summary>
    /// Gets the sources generated by all source generators.
    /// </summary>
    public ImmutableArray<GeneratedSourceResult> GeneratedSourceResults { get; }

    /// <summary>
    /// Creates a validator that can be used to validate the <see cref="InitialCompilation"/>.
    /// </summary>
    /// <returns>A validator that can be used to validate the <see cref="InitialCompilation"/>.</returns>
    public CompilationValidator ValidateInitialCompilation() => new(InitialCompilation, InitialCompilation.GetDiagnostics());

    /// <summary>
    /// Creates a validator that can be used to validate the <see cref="FinalCompilation"/>.
    /// </summary>
    /// <returns>A validator that can be used to validate the <see cref="FinalCompilation"/>.</returns>
    public CompilationValidator ValidateFinalCompilation() => new(FinalCompilation, Diagnostics);

    /// <summary>
    /// Creates a validator that can be used to validate the <see cref="Diagnostics"/>.
    /// </summary>
    /// <returns>A validator that can be used to validate the <see cref="Diagnostics"/>.</returns>
    public DiagnosticsValidator ValidateDiagnostics() => new(Diagnostics);

    /// <summary>
    /// Writes the diagnostics and all generated sources to the trace listeners in the <see cref="Trace.Listeners"/> collection.
    /// </summary>
    public void Trace()
    {
        TraceDiagnostics();
        System.Diagnostics.Trace.WriteLine(string.Empty);
        TraceGeneratedSources();
    }

    /// <summary>
    /// Writes the diagnostics to the trace listeners in the <see cref="Trace.Listeners"/> collection.
    /// </summary>
    public void TraceDiagnostics()
    {
        if (Diagnostics.Length == 0)
            System.Diagnostics.Trace.WriteLine("Diagnostics: <None>");
        else
            System.Diagnostics.Trace.WriteLine($"Diagnostics:\n{string.Join("\n", Diagnostics.Select(x => x.ToString()))}");
    }

    /// <summary>
    /// Writes all generated sources to the trace listeners in the <see cref="Trace.Listeners"/> collection.
    /// </summary>
    public void TraceGeneratedSources()
    {
        var genLog = new StringBuilder().AppendLine("Generated Code:");
        foreach (var result in GeneratedSourceResults)
        {
            genLog.AppendLine(result.HintName);
            genLog.AppendLine(result.SourceText.ToString());
        }

        System.Diagnostics.Trace.WriteLine(genLog.ToString());
    }
}
