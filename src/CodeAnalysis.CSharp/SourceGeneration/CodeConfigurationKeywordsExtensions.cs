//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using MaSch.CodeAnalysis.CSharp.SourceGeneration.Configuration;

namespace MaSch.CodeAnalysis.CSharp.SourceGeneration;

/// <summary>
/// Provides extension methods for the different possible keyword combinations of code configurations.
/// </summary>
public static class ClassConfigurationKeywordsExtensions
{
    /// <summary>
    /// Marks the code configuration as <c>static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStatic<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>sealed</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsSealed<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithKeyword(MemberKeyword.Sealed);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsAbstract<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStaticUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>sealed unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsSealedUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsAbstractUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>static partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStaticPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithKeyword(MemberKeyword.Static | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>sealed partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsSealedPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithKeyword(MemberKeyword.Sealed | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>abstract partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsAbstractPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithKeyword(MemberKeyword.Abstract | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>static unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStaticUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>sealed unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsSealedUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>abstract unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsAbstractUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStatic<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public sealed</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicSealed<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Sealed);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicAbstract<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStaticUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public sealed unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicSealedUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicAbstractUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStaticPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public sealed partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicSealedPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public abstract partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicAbstractPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStaticUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public sealed unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicSealedUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public abstract unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicAbstractUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStatic<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private sealed</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateSealed<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Sealed);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateAbstract<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStaticUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private sealed unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateSealedUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateAbstractUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivatePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStaticPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private sealed partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateSealedPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private abstract partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateAbstractPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStaticUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private sealed unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateSealedUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private abstract unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateAbstractUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStatic<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected sealed</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedSealed<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Sealed);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedAbstract<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStaticUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected sealed unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedSealedUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedAbstractUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStaticPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected sealed partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedSealedPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected abstract partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedAbstractPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStaticUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected sealed unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedSealedUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected abstract unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedAbstractUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStatic<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal sealed</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalSealed<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Sealed);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalAbstract<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStaticUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal sealed unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalSealedUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalAbstractUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStaticPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal sealed partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalSealedPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal abstract partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalAbstractPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStaticUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal sealed unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalSealedUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal abstract unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalAbstractUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStatic<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal sealed</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalSealed<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Sealed);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalAbstract<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStaticUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal sealed unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalSealedUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalAbstractUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStaticPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal sealed partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalSealedPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal abstract partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalAbstractPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStaticUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal sealed unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalSealedUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal abstract unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalAbstractUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStatic<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected sealed</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedSealed<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Sealed);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedAbstract<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStaticUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected sealed unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedSealedUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedAbstractUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStaticPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected sealed partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedSealedPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected abstract partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedAbstractPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStaticUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected sealed unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedSealedUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected abstract unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedAbstractUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileStatic<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file sealed</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileSealed<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Sealed);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileAbstract<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileStaticUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file sealed unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileSealedUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileAbstractUnsafe<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFilePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file static partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileStaticPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file sealed partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileSealedPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file abstract partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileAbstractPartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file static unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileStaticUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file sealed unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileSealedUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file abstract unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileAbstractUnsafePartial<T>(this T config)
        where T : IClassConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }
}

/// <summary>
/// Provides extension methods for the different possible keyword combinations of code configurations.
/// </summary>
public static class ConstructorConfigurationKeywordsExtensions
{
    /// <summary>
    /// Marks the code configuration as <c>unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsUnsafe<T>(this T config)
        where T : IConstructorConfiguration
    {
        config.WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicUnsafe<T>(this T config)
        where T : IConstructorConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateUnsafe<T>(this T config)
        where T : IConstructorConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedUnsafe<T>(this T config)
        where T : IConstructorConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalUnsafe<T>(this T config)
        where T : IConstructorConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalUnsafe<T>(this T config)
        where T : IConstructorConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedUnsafe<T>(this T config)
        where T : IConstructorConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }
}

/// <summary>
/// Provides extension methods for the different possible keyword combinations of code configurations.
/// </summary>
public static class DelegateConfigurationKeywordsExtensions
{
    /// <summary>
    /// Marks the code configuration as <c>static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStatic<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNew<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStaticUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStatic<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNew<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStaticUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStatic<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNew<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStaticUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStatic<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNew<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStaticUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStatic<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNew<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStaticUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStatic<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNew<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStaticUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStatic<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNew<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStaticUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewUnsafe<T>(this T config)
        where T : IDelegateConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }
}

/// <summary>
/// Provides extension methods for the different possible keyword combinations of code configurations.
/// </summary>
public static class MethodConfigurationKeywordsExtensions
{
    /// <summary>
    /// Marks the code configuration as <c>static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStatic<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNew<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsOverride<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsAbstract<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsVirtual<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewAbstract<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewVirtual<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>static extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStaticExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Static | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>override extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsOverrideExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Override | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>virtual extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsVirtualExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Virtual | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new virtual extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewVirtualExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPartial<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>static partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStaticPartial<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Static | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStaticUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsOverrideUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsAbstractUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsVirtualUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewAbstractUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewVirtualUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>static extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStaticExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Static | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>override extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsOverrideExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Override | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>virtual extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsVirtualExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Virtual | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new virtual extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewVirtualExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>partial unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPartialUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Partial | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>static partial unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStaticPartialUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithKeyword(MemberKeyword.Static | MemberKeyword.Partial | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStatic<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNew<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicOverride<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicAbstract<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicVirtual<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewAbstract<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewVirtual<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStaticExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public override extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicOverrideExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Override | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public virtual extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicVirtualExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new virtual extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewVirtualExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicPartial<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStaticPartial<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStaticUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicOverrideUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicAbstractUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicVirtualUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewAbstractUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewVirtualUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStaticExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public override extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicOverrideExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Override | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public virtual extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicVirtualExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new virtual extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewVirtualExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public partial unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicPartialUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Partial | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static partial unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStaticPartialUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStatic<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNew<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateOverride<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateAbstract<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateVirtual<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewAbstract<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewVirtual<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStaticExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private override extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateOverrideExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Override | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private virtual extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateVirtualExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new virtual extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewVirtualExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivatePartial<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStaticPartial<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStaticUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateOverrideUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateAbstractUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateVirtualUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewAbstractUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewVirtualUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStaticExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private override extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateOverrideExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Override | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private virtual extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateVirtualExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new virtual extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewVirtualExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private partial unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivatePartialUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Partial | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static partial unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStaticPartialUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStatic<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNew<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedOverride<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedAbstract<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedVirtual<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewAbstract<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewVirtual<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStaticExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected override extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedOverrideExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Override | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected virtual extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedVirtualExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new virtual extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewVirtualExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedPartial<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStaticPartial<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStaticUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedOverrideUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedAbstractUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedVirtualUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewAbstractUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewVirtualUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStaticExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected override extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedOverrideExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Override | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected virtual extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedVirtualExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new virtual extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewVirtualExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected partial unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedPartialUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Partial | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static partial unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStaticPartialUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStatic<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNew<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalOverride<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalAbstract<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalVirtual<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewAbstract<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewVirtual<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStaticExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal override extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalOverrideExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Override | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal virtual extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalVirtualExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new virtual extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewVirtualExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalPartial<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStaticPartial<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStaticUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalOverrideUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalAbstractUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalVirtualUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewAbstractUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewVirtualUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStaticExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal override extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalOverrideExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Override | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal virtual extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalVirtualExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new virtual extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewVirtualExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal partial unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalPartialUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Partial | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static partial unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStaticPartialUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStatic<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNew<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalOverride<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalAbstract<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalVirtual<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewAbstract<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewVirtual<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStaticExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal override extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalOverrideExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Override | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal virtual extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalVirtualExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new virtual extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewVirtualExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalPartial<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStaticPartial<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStaticUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalOverrideUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalAbstractUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalVirtualUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewAbstractUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewVirtualUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStaticExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal override extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalOverrideExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Override | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal virtual extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalVirtualExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new virtual extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewVirtualExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal partial unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalPartialUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Partial | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static partial unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStaticPartialUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStatic<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNew<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedOverride<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedAbstract<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedVirtual<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewAbstract<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewVirtual<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStaticExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected override extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedOverrideExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Override | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected virtual extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedVirtualExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new virtual extern</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewVirtualExtern<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Extern);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedPartial<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStaticPartial<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStaticUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedOverrideUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedAbstractUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedVirtualUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewAbstractUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewVirtualUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStaticExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected override extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedOverrideExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Override | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected virtual extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedVirtualExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new virtual extern unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewVirtualExternUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Extern | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected partial unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedPartialUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Partial | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static partial unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStaticPartialUnsafe<T>(this T config)
        where T : IMethodConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static | MemberKeyword.Partial | MemberKeyword.Unsafe);
        return config;
    }
}

/// <summary>
/// Provides extension methods for the different possible keyword combinations of code configurations.
/// </summary>
public static class EventConfigurationKeywordsExtensions
{
    /// <summary>
    /// Marks the code configuration as <c>static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStatic<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNew<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsOverride<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsAbstract<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsVirtual<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewAbstract<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewVirtual<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStaticUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsOverrideUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsAbstractUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsVirtualUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewAbstractUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewVirtualUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStatic<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNew<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicOverride<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicAbstract<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicVirtual<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewAbstract<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewVirtual<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStaticUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicOverrideUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicAbstractUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicVirtualUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewAbstractUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewVirtualUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStatic<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNew<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateOverride<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateAbstract<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateVirtual<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewAbstract<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewVirtual<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStaticUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateOverrideUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateAbstractUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateVirtualUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewAbstractUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewVirtualUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStatic<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNew<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedOverride<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedAbstract<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedVirtual<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewAbstract<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewVirtual<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStaticUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedOverrideUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedAbstractUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedVirtualUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewAbstractUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewVirtualUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStatic<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNew<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalOverride<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalAbstract<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalVirtual<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewAbstract<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewVirtual<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStaticUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalOverrideUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalAbstractUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalVirtualUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewAbstractUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewVirtualUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStatic<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNew<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalOverride<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalAbstract<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalVirtual<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewAbstract<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewVirtual<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStaticUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalOverrideUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalAbstractUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalVirtualUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewAbstractUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewVirtualUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStatic<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNew<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedOverride<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedAbstract<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedVirtual<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewAbstract<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewVirtual<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStaticUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedOverrideUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedAbstractUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedVirtualUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewAbstractUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewVirtualUnsafe<T>(this T config)
        where T : IEventConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }
}

/// <summary>
/// Provides extension methods for the different possible keyword combinations of code configurations.
/// </summary>
public static class FieldConfigurationKeywordsExtensions
{
    /// <summary>
    /// Marks the code configuration as <c>static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStatic<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNew<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsReadOnly<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithKeyword(MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>ref readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsRefReadOnly<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithKeyword(MemberKeyword.Ref | MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStaticUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsReadOnlyUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>ref readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsRefReadOnlyUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithKeyword(MemberKeyword.Ref | MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStatic<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNew<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicReadOnly<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public ref readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicRefReadOnly<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Ref | MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStaticUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicReadOnlyUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public ref readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicRefReadOnlyUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Ref | MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStatic<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNew<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateReadOnly<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private ref readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateRefReadOnly<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Ref | MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStaticUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateReadOnlyUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private ref readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateRefReadOnlyUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Ref | MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStatic<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNew<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedReadOnly<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected ref readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedRefReadOnly<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Ref | MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStaticUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedReadOnlyUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected ref readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedRefReadOnlyUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Ref | MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStatic<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNew<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalReadOnly<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal ref readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalRefReadOnly<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Ref | MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStaticUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalReadOnlyUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal ref readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalRefReadOnlyUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Ref | MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStatic<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNew<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalReadOnly<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal ref readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalRefReadOnly<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Ref | MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStaticUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalReadOnlyUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal ref readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalRefReadOnlyUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Ref | MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStatic<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNew<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedReadOnly<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected ref readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedRefReadOnly<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Ref | MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStaticUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedReadOnlyUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected ref readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedRefReadOnlyUnsafe<T>(this T config)
        where T : IFieldConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Ref | MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }
}

/// <summary>
/// Provides extension methods for the different possible keyword combinations of code configurations.
/// </summary>
public static class PropertyConfigurationBaseKeywordsExtensions
{
    /// <summary>
    /// Marks the code configuration as <c>static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStatic<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNew<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsOverride<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsAbstract<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsVirtual<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewAbstract<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewVirtual<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsStaticUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsOverrideUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsAbstractUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsVirtualUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewAbstractUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsNewVirtualUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStatic<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNew<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicOverride<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicAbstract<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicVirtual<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewAbstract<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewVirtual<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicStaticUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicOverrideUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicAbstractUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicVirtualUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewAbstractUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicNewVirtualUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStatic<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNew<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateOverride<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateAbstract<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateVirtual<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewAbstract<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewVirtual<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateStaticUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateOverrideUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateAbstractUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateVirtualUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewAbstractUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateNewVirtualUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStatic<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNew<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedOverride<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedAbstract<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedVirtual<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewAbstract<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewVirtual<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedStaticUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedOverrideUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedAbstractUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedVirtualUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewAbstractUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedNewVirtualUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStatic<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNew<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalOverride<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalAbstract<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalVirtual<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewAbstract<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewVirtual<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalStaticUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalOverrideUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalAbstractUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalVirtualUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewAbstractUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalNewVirtualUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStatic<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNew<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalOverride<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalAbstract<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalVirtual<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewAbstract<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewVirtual<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalStaticUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalOverrideUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalAbstractUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalVirtualUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewAbstractUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalNewVirtualUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStatic<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNew<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected override</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedOverride<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Override);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedAbstract<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedVirtual<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewAbstract<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new virtual</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewVirtual<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected static unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedStaticUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Static | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected override unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedOverrideUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Override | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedAbstractUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedVirtualUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewAbstractUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected new virtual unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedNewVirtualUnsafe<T>(this T config)
        where T : IPropertyConfigurationBase<T>
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.New | MemberKeyword.Virtual | MemberKeyword.Unsafe);
        return config;
    }
}

/// <summary>
/// Provides extension methods for the different possible keyword combinations of code configurations.
/// </summary>
public static class InterfaceConfgurationKeywordsExtensions
{
    /// <summary>
    /// Marks the code configuration as <c>unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsUnsafe<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPartial<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsUnsafePartial<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicUnsafe<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicPartial<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicUnsafePartial<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateUnsafe<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivatePartial<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateUnsafePartial<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedUnsafe<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedPartial<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedUnsafePartial<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalUnsafe<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalPartial<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalUnsafePartial<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalUnsafe<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalPartial<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalUnsafePartial<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedUnsafe<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedPartial<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedUnsafePartial<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileUnsafe<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFilePartial<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileUnsafePartial<T>(this T config)
        where T : IInterfaceConfguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }
}

/// <summary>
/// Provides extension methods for the different possible keyword combinations of code configurations.
/// </summary>
public static class RecordConfigurationKeywordsExtensions
{
    /// <summary>
    /// Marks the code configuration as <c>sealed</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsSealed<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithKeyword(MemberKeyword.Sealed);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsAbstract<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>sealed unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsSealedUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsAbstractUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>sealed partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsSealedPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithKeyword(MemberKeyword.Sealed | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>abstract partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsAbstractPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithKeyword(MemberKeyword.Abstract | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>sealed unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsSealedUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>abstract unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsAbstractUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public sealed</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicSealed<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Sealed);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicAbstract<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public sealed unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicSealedUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicAbstractUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public sealed partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicSealedPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public abstract partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicAbstractPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public sealed unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicSealedUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public abstract unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicAbstractUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private sealed</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateSealed<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Sealed);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateAbstract<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private sealed unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateSealedUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateAbstractUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivatePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private sealed partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateSealedPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private abstract partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateAbstractPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private sealed unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateSealedUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private abstract unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateAbstractUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected sealed</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedSealed<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Sealed);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedAbstract<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected sealed unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedSealedUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedAbstractUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected sealed partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedSealedPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected abstract partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedAbstractPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected sealed unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedSealedUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected abstract unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedAbstractUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal sealed</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalSealed<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Sealed);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalAbstract<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal sealed unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalSealedUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalAbstractUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal sealed partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalSealedPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal abstract partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalAbstractPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal sealed unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalSealedUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal abstract unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalAbstractUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal sealed</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalSealed<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Sealed);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalAbstract<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal sealed unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalSealedUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalAbstractUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal sealed partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalSealedPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal abstract partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalAbstractPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal sealed unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalSealedUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal abstract unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalAbstractUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected sealed</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedSealed<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Sealed);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedAbstract<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected sealed unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedSealedUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedAbstractUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected sealed partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedSealedPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected abstract partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedAbstractPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected sealed unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedSealedUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected abstract unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedAbstractUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file sealed</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileSealed<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Sealed);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file abstract</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileAbstract<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Abstract);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file sealed unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileSealedUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file abstract unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileAbstractUnsafe<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFilePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file sealed partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileSealedPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file abstract partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileAbstractPartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file sealed unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileSealedUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Sealed | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file abstract unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileAbstractUnsafePartial<T>(this T config)
        where T : IRecordConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Abstract | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }
}

/// <summary>
/// Provides extension methods for the different possible keyword combinations of code configurations.
/// </summary>
public static class StructConfigurationKeywordsExtensions
{
    /// <summary>
    /// Marks the code configuration as <c>readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsReadOnly<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithKeyword(MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsUnsafe<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsReadOnlyUnsafe<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithKeyword(MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>readonly ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsReadOnlyRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>unsafe ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsUnsafeRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>readonly unsafe ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsReadOnlyUnsafeRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>readonly partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsReadOnlyPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsUnsafePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>readonly unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsReadOnlyUnsafePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithKeyword(MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>readonly ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsReadOnlyRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>unsafe ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsUnsafeRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>readonly unsafe ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsReadOnlyUnsafeRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicReadOnly<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicUnsafe<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicReadOnlyUnsafe<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public readonly ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicReadOnlyRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public unsafe ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicUnsafeRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public readonly unsafe ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicReadOnlyUnsafeRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public readonly partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicReadOnlyPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicUnsafePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public readonly unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicReadOnlyUnsafePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public readonly ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicReadOnlyRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public unsafe ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicUnsafeRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>public readonly unsafe ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPublicReadOnlyUnsafeRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Public).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateReadOnly<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateUnsafe<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateReadOnlyUnsafe<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private readonly ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateReadOnlyRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private unsafe ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateUnsafeRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private readonly unsafe ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateReadOnlyUnsafeRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivatePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private readonly partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateReadOnlyPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateUnsafePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private readonly unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateReadOnlyUnsafePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private readonly ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateReadOnlyRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private unsafe ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateUnsafeRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private readonly unsafe ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateReadOnlyUnsafeRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Private).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedReadOnly<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedUnsafe<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedReadOnlyUnsafe<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected readonly ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedReadOnlyRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected unsafe ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedUnsafeRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected readonly unsafe ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedReadOnlyUnsafeRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected readonly partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedReadOnlyPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedUnsafePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected readonly unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedReadOnlyUnsafePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected readonly ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedReadOnlyRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected unsafe ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedUnsafeRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected readonly unsafe ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedReadOnlyUnsafeRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Protected).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalReadOnly<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalUnsafe<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalReadOnlyUnsafe<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal readonly ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalReadOnlyRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal unsafe ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalUnsafeRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal readonly unsafe ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalReadOnlyUnsafeRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal readonly partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalReadOnlyPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalUnsafePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal readonly unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalReadOnlyUnsafePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal readonly ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalReadOnlyRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal unsafe ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalUnsafeRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>internal readonly unsafe ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsInternalReadOnlyUnsafeRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.Internal).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalReadOnly<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalUnsafe<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalReadOnlyUnsafe<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal readonly ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalReadOnlyRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal unsafe ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalUnsafeRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal readonly unsafe ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalReadOnlyUnsafeRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal readonly partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalReadOnlyPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalUnsafePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal readonly unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalReadOnlyUnsafePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal readonly ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalReadOnlyRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal unsafe ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalUnsafeRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>protected internal readonly unsafe ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsProtectedInternalReadOnlyUnsafeRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.ProtectedInternal).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedReadOnly<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedUnsafe<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedReadOnlyUnsafe<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected readonly ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedReadOnlyRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected unsafe ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedUnsafeRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected readonly unsafe ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedReadOnlyUnsafeRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected readonly partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedReadOnlyPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedUnsafePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected readonly unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedReadOnlyUnsafePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected readonly ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedReadOnlyRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected unsafe ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedUnsafeRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>private protected readonly unsafe ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsPrivateProtectedReadOnlyUnsafeRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.PrivateProtected).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file readonly</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileReadOnly<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.ReadOnly);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileUnsafe<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file readonly unsafe</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileReadOnlyUnsafe<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file readonly ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileReadOnlyRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file unsafe ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileUnsafeRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file readonly unsafe ref</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileReadOnlyUnsafeRef<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Ref);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFilePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file readonly partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileReadOnlyPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileUnsafePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file readonly unsafe partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileReadOnlyUnsafePartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file readonly ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileReadOnlyRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file unsafe ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileUnsafeRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.Unsafe | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }

    /// <summary>
    /// Marks the code configuration as <c>file readonly unsafe ref partial</c>.
    /// </summary>
    /// <typeparam name="T">The type of code configuration.</typeparam>
    /// <param name="config">The code configuration to change.</param>
    /// <returns>A self-reference to <paramref name="config"/>.</returns>
    public static T AsFileReadOnlyUnsafeRefPartial<T>(this T config)
        where T : IStructConfiguration
    {
        config.WithAccessModifier(AccessModifier.File).WithKeyword(MemberKeyword.ReadOnly | MemberKeyword.Unsafe | MemberKeyword.Ref | MemberKeyword.Partial);
        return config;
    }
}
