using MaSch.Generators.Support;
using MaSch.Generators.Properties;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Runtime.CompilerServices;
using System.Text;

namespace MaSch.Generators.StaticFiles;

/// <summary>
/// Generates the supporting code for other generator projects.
/// </summary>
[Generator]
public class Generator : IIncrementalGenerator
{
    /// <inheritdoc />
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(AddSources);
    }

    private static void AddSources(IncrementalGeneratorPostInitializationContext context)
    {
        new SourceCreator(context)
            .AddSource(Resource.AddSourceExtensions)
            .AddSource(Resource.Attributes)
            .AddSource(Resource.Interfaces)
            .AddSource(Resource.SourceBuilder)
            .AddSource(Resource.SymbolExtensions)
            .AddSource(Resource.SyntaxExtensions);
    }

    private readonly struct SourceCreator
    {
        private static readonly string Header = SourceBuilder.AutoGeneratedFileHeader;
        private static readonly Encoding Encoding = Encoding.UTF8;

        private readonly IncrementalGeneratorPostInitializationContext _context;

        public SourceCreator(IncrementalGeneratorPostInitializationContext context)
        {
            _context = context;
        }

        public SourceCreator AddSource(
            string source,
#pragma warning disable CS0618 // Type or member is obsolete
            [CallerArgumentExpression("source")] string name = "")
#pragma warning restore CS0618 // Type or member is obsolete
        {
            _context.AddSource($"{name.Substring(9)}.g.cs", SourceText.From(Header + source, Encoding));
            return this;
        }
    }
}
