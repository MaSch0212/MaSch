using Microsoft.CodeAnalysis.Text;
using System;
using System.IO;
using System.Linq;
using System.Text;

#nullable enable

namespace MaSch.Generators.Support
{
    /// <summary>
    /// Represents a in-memory source file.
    /// </summary>
    public class SourceBuilder
    {
        /// <summary>
        /// The file header that is added to all source files generated using the <see cref="SourceBuilder"/>.
        /// </summary>
        public static readonly string AutoGeneratedFileHeader = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

";

        private readonly StringBuilder _builder;
        private int _currentIndentLevel = 0;

        /// <summary>
        /// Initializes a new instance of the <see cref="SourceBuilder"/> class.
        /// </summary>
        public SourceBuilder()
        {
            _builder = new StringBuilder(AutoGeneratedFileHeader);
        }

        /// <summary>
        /// Gets or sets the size of the indentation.
        /// </summary>
        public int IndentSize { get; set; } = 4;

        /// <summary>
        /// Adds a new region to the source file.
        /// </summary>
        /// <param name="regionName">Name of the region.</param>
        /// <returns>Returns an <see cref="IDisposable"/> object, which closes the region when disposed.</returns>
        public CodeBlock AddRegion(string regionName)
        {
            _ = AppendLine($"#region {regionName}");
            return new CodeBlock(this, "#endregion", false);
        }

        /// <summary>
        /// Adds a new code block to the source file.
        /// </summary>
        /// <param name="blockLine">The line before the code block.</param>
        /// <returns>Returns an <see cref="IDisposable"/> object, which closes the code block when disposed.</returns>
        public CodeBlock AddBlock(string blockLine)
        {
            return AddBlock(blockLine, false);
        }

        /// <summary>
        /// Adds a new code block to the source file.
        /// </summary>
        /// <param name="blockLine">The line before the code block.</param>
        /// <param name="addSemicolon">if <c>true</c> adds a semicolon after the end of the block.</param>
        /// <returns>Returns an <see cref="IDisposable"/> object, which closes the code block when disposed.</returns>
        public CodeBlock AddBlock(string blockLine, bool addSemicolon)
        {
            _ = AppendLine(blockLine);
            return AddBlock(addSemicolon);
        }

        /// <summary>
        /// Adds a new code block to the source file.
        /// </summary>
        /// <returns>Returns an <see cref="IDisposable"/> object, which closes the code block when disposed.</returns>
        public CodeBlock AddBlock()
        {
            return AddBlock(false);
        }

        /// <summary>
        /// Adds a new code block to the source file.
        /// </summary>
        /// <param name="addSemicolon">if <c>true</c> adds a semicolon after the end of the block.</param>
        /// <returns>Returns an <see cref="IDisposable"/> object, which closes the code block when disposed.</returns>
        public CodeBlock AddBlock(bool addSemicolon)
        {
            _ = AppendLine("{");
            return new CodeBlock(this, addSemicolon ? "};" : "}", true);
        }

        /// <summary>
        /// Appends the default line terminator to the end of the current <see cref="SourceBuilder"/> object.
        /// </summary>
        /// <returns>A reference to this instance after the append operation has completed.</returns>
        public SourceBuilder AppendLine()
        {
            return Append(Environment.NewLine);
        }

        /// <summary>
        /// Appends a copy of the specified string followed by the default line terminator to the end of the current <see cref="SourceBuilder"/> object.
        /// </summary>
        /// <param name="value">The string to append.</param>
        /// <returns>A reference to this instance after the append operation has completed.</returns>
        public SourceBuilder AppendLine(string value)
        {
            return Append(value + Environment.NewLine);
        }

        /// <summary>
        /// Appends a copy of the specified string to this instance.
        /// </summary>
        /// <param name="value">The value.</param>
        /// <returns>A reference to this instance after the append operation has completed.</returns>
        public SourceBuilder Append(string value)
        {
            var indent = new string(' ', _currentIndentLevel * IndentSize);
            var lines = value.Replace("\r", string.Empty).Split(new[] { '\n' }, StringSplitOptions.None);
            foreach (var line in lines.Take(lines.Length - 1))
            {
                if (string.IsNullOrWhiteSpace(line))
                    _ = _builder.AppendLine();
                else
                    _ = _builder.Append(indent).AppendLine(line);
            }

            if (lines.Length > 1 && !string.IsNullOrWhiteSpace(lines[lines.Length - 1]))
                _ = _builder.Append(indent);
            _ = _builder.Append(lines[lines.Length - 1]);
            return this;
        }

        /// <summary>
        /// Converts the value of this instance to a System.String.
        /// </summary>
        /// <returns>A string whose value is the same as this instance.</returns>
        public override string ToString()
        {
            return _builder.ToString();
        }

        /// <summary>
        /// Converts the value of this instance to a <see cref="SourceText"/>.
        /// </summary>
        /// <param name="encoding">The encoding to use.</param>
        /// <param name="checksumAlgorithm">The source hash algorithm to use.</param>
        /// <returns>A <see cref="SourceText"/> whose value is the same as this instance.</returns>
        public SourceText ToSourceText(Encoding? encoding = null, SourceHashAlgorithm checksumAlgorithm = SourceHashAlgorithm.Sha1)
        {
            encoding ??= Encoding.UTF8;
            const int LargeObjectHeapLimitInChars = 40 * 1024;
            if (_builder.Length >= LargeObjectHeapLimitInChars)
            {
                using var reader = new StringBuilderReader(_builder);
                return SourceText.From(reader, _builder.Length, encoding, checksumAlgorithm);
            }

            return SourceText.From(_builder.ToString(), encoding, checksumAlgorithm);
        }

        /// <summary>
        /// Represents a code block, that has been opened in the <see cref="SourceBuilder"/>.
        /// When disposed the indent in the source <see cref="SourceBuilder"/> is reduced again.
        /// </summary>
        public readonly struct CodeBlock : IDisposable
        {
            private readonly SourceBuilder _builder;
            private readonly string _endContent;
            private readonly bool _changeIndent;

            /// <summary>
            /// Initializes a new instance of the <see cref="CodeBlock"/> struct.
            /// </summary>
            /// <param name="builder">The <see cref="SourceBuilder"/> that owns the <see cref="CodeBlock"/>.</param>
            /// <param name="endContent">The text that should be appended after the block is disposed.</param>
            /// <param name="changeIndent">Determines whether indentation should be changed.</param>
            public CodeBlock(SourceBuilder builder, string endContent, bool changeIndent)
            {
                _builder = builder;
                _endContent = endContent;
                _changeIndent = changeIndent;

                if (changeIndent)
                    _builder._currentIndentLevel++;
            }

            /// <inheritdoc/>
            public void Dispose()
            {
                if (_changeIndent)
                    _builder._currentIndentLevel--;
                _ = _builder.AppendLine(_endContent);
            }
        }

        // https://github.com/dotnet/roslyn/blob/02436e52ce59da5d060fb3f5eda630c9205b67cf/src/Compilers/Core/Portable/Text/StringBuilderReader.cs
        private sealed class StringBuilderReader : TextReader
        {
            private readonly StringBuilder _stringBuilder;
            private int _position;

            public StringBuilderReader(StringBuilder stringBuilder)
            {
                _stringBuilder = stringBuilder;
                _position = 0;
            }

            public override int Peek()
            {
                if (_position == _stringBuilder.Length)
                    return -1;

                return _stringBuilder[_position];
            }

            public override int Read()
            {
                if (_position == _stringBuilder.Length)
                    return -1;

                return _stringBuilder[_position++];
            }

            public override int Read(char[] buffer, int index, int count)
            {
                var length = Math.Min(count, _stringBuilder.Length - _position);
                _stringBuilder.CopyTo(_position, buffer, index, length);
                _position += length;
                return length;
            }

            public override int ReadBlock(char[] buffer, int index, int count) =>
                Read(buffer, index, count);

#if NETCOREAPP
        public override int Read(Span<char> buffer)
        {
            var length = Math.Min(buffer.Length, _stringBuilder.Length - _position);
            _stringBuilder.CopyTo(_position, buffer, length);
            _position += length;
            return length;
        }

        public override int ReadBlock(Span<char> buffer) =>
            Read(buffer);
#endif

            public override string ReadToEnd()
            {
                var result = _position == 0
                    ? _stringBuilder.ToString()
                    : _stringBuilder.ToString(_position, _stringBuilder.Length - _position);

                _position = _stringBuilder.Length;
                return result;
            }
        }
    }
}