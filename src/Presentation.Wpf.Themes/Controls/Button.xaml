<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:tm="clr-namespace:MaSch.Presentation.Wpf.Markup">

    <!--  Region Button  -->
    <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{tm:ThemeValue Key=ButtonNormalBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=ButtonNormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=ButtonNormalBorderThickness}" />
        <Setter Property="Foreground" Value="{tm:ThemeValue Key=ButtonNormalForegroundBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="{tm:ThemeValue Key=ButtonPadding}" />
        <Setter Property="FontWeight" Value="DemiBold" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="Template" TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{tm:ThemeValue Key=ButtonCornerRadius}">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{tm:ThemeValue Key=ButtonHoverBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=ButtonHoverBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=ButtonHoverBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=ButtonHoverForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{tm:ThemeValue Key=ButtonPressBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=ButtonPressBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=ButtonPressBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=ButtonPressForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{tm:ThemeValue Key=ButtonDisabledBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=ButtonDisabledBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=ButtonDisabledBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=ButtonDisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  EndRegion  -->

    <!--  Region ToggleButton  -->
    <Style BasedOn="{StaticResource {x:Type ToggleButton}}" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{tm:ThemeValue Key=ToggleButtonNormalBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=ToggleButtonNormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=ToggleButtonNormalBorderThickness}" />
        <Setter Property="Foreground" Value="{tm:ThemeValue Key=ToggleButtonNormalForegroundBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="16,8" />
        <Setter Property="FontWeight" Value="DemiBold" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{tm:ThemeValue Key=ToggleButtonCornerRadius}">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{tm:ThemeValue Key=ToggleButtonHoverBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=ToggleButtonHoverBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=ToggleButtonHoverBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=ToggleButtonHoverForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{tm:ThemeValue Key=ToggleButtonCheckedBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=ToggleButtonCheckedBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=ToggleButtonCheckedBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=ToggleButtonCheckedForegroundBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{tm:ThemeValue Key=ToggleButtonHoverCheckedBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=ToggleButtonHoverCheckedBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=ToggleButtonHoverCheckedBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=ToggleButtonHoverCheckedForegroundBrush}" />
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{tm:ThemeValue Key=ToggleButtonPressBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=ToggleButtonPressBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=ToggleButtonPressBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=ToggleButtonPressForegroundBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{tm:ThemeValue Key=ToggleButtonPressCheckedBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=ToggleButtonPressCheckedBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=ToggleButtonPressCheckedBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=ToggleButtonPressCheckedForegroundBrush}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{tm:ThemeValue Key=ToggleButtonDisabledBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=ToggleButtonDisabledBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=ToggleButtonDisabledBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=ToggleButtonDisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  EndRegion  -->

    <!--  Region RepeatButton  -->
    <Style BasedOn="{StaticResource {x:Type RepeatButton}}" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{tm:ThemeValue Key=ButtonNormalBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=ButtonNormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=ButtonNormalBorderThickness}" />
        <Setter Property="Foreground" Value="{tm:ThemeValue Key=ButtonNormalForegroundBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="15,5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate x:Name="Template" TargetType="{x:Type RepeatButton}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{tm:ThemeValue Key=ToggleButtonCornerRadius}">
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{tm:ThemeValue Key=ButtonHoverBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=ButtonHoverBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=ButtonHoverBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=ButtonHoverForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{tm:ThemeValue Key=ButtonPressBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=ButtonPressBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=ButtonPressBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=ButtonPressForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{tm:ThemeValue Key=ButtonDisabledBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=ButtonDisabledBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=ButtonDisabledBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=ButtonDisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  EndRegion  -->
</ResourceDictionary>