<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:MaSch.Presentation.Wpf.Controls"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:tm="clr-namespace:MaSch.Presentation.Wpf.Markup">

    <Style x:Key="MaSchCheckBox_ToggleButton" TargetType="ToggleButton">
        <Setter Property="Background" Value="{tm:ThemeValue Key=CheckBoxNormalBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=CheckBoxNormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=CheckBoxNormalBorderThickness}" />
        <Setter Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxNormalForegroundBrush}" />
        <Setter Property="Height" Value="18" />
        <Setter Property="Width" Value="18" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="3"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{tm:ThemeValue Key=CheckBoxCornerRadius}">
                        <controls:IconPresenter x:Name="Check"
                                                Foreground="{tm:ThemeValue Key=CheckBoxCheckedCheckBackgroundBrush}"
                                                Icon="{tm:ThemeValue Key=CheckBoxCheckIcon}"
                                                Opacity="0" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{tm:ThemeValue Key=CheckBoxHoverBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=CheckBoxHoverBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=CheckBoxHoverBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxHoverForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{tm:ThemeValue Key=CheckBoxCheckedBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=CheckBoxCheckedBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=CheckBoxCheckedBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxCheckedForegroundBrush}" />
                            <Setter TargetName="Check" Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxCheckedCheckBackgroundBrush}" />
                            <Setter TargetName="Check" Property="Opacity" Value="1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{tm:ThemeValue Key=CheckBoxHoverCheckedBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=CheckBoxHoverCheckedBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=CheckBoxHoverCheckedBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxHoverCheckedForegroundBrush}" />
                            <Setter TargetName="Check" Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxHoverCheckedCheckBackgroundBrush}" />
                            <Setter TargetName="Check" Property="Opacity" Value="1" />
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{tm:ThemeValue Key=CheckBoxPressBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=CheckBoxPressBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=CheckBoxPressBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxPressForegroundBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{tm:ThemeValue Key=CheckBoxPressCheckedBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=CheckBoxPressCheckedBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=CheckBoxPressCheckedBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxPressCheckedForegroundBrush}" />
                            <Setter TargetName="Check" Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxPressCheckedCheckBackgroundBrush}" />
                            <Setter TargetName="Check" Property="Opacity" Value="1" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{tm:ThemeValue Key=CheckBoxDisabledBackgroundBrush}" />
                            <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=CheckBoxDisabledBorderBrush}" />
                            <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=CheckBoxDisabledBorderThickness}" />
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxDisabledForegroundBrush}" />
                            <Setter TargetName="Check" Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxDisabledCheckBackgroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Type CheckBox}}" TargetType="{x:Type CheckBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="{tm:ThemeValue Key=CheckBoxNormalBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{tm:ThemeValue Key=CheckBoxNormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="{tm:ThemeValue Key=CheckBoxNormalBorderThickness}" />
        <Setter Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxNormalForegroundBrush}" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <DockPanel Margin="{TemplateBinding Padding}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ToggleButton x:Name="ToggleButton"
                                          VerticalAlignment="Center"
                                          DockPanel.Dock="Left"
                                          Focusable="False"
                                          IsChecked="{Binding Path=IsChecked, RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{DynamicResource MaSchCheckBox_ToggleButton}" />
                            <ContentPresenter Margin="5,0,0,0" VerticalAlignment="Center">
                                <ContentPresenter.Resources>
                                    <DataTemplate DataType="{x:Type sys:String}">
                                        <TextBlock Text="{Binding}">
                                            <TextBlock.Resources>
                                                <Style TargetType="{x:Type TextBlock}">
                                                    <Setter Property="FontFamily" Value="{tm:ThemeValue Key=FontNormal}" />
                                                    <Setter Property="FontSize" Value="{tm:ThemeValue Key=TextFontSize}" />
                                                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType=CheckBox}, Path=Foreground}" />
                                                    <Setter Property="TextWrapping" Value="Wrap" />
                                                    <Setter Property="SnapsToDevicePixels" Value="True" />
                                                </Style>
                                            </TextBlock.Resources>
                                        </TextBlock>
                                    </DataTemplate>
                                </ContentPresenter.Resources>
                            </ContentPresenter>
                        </DockPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxHoverForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxCheckedForegroundBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxHoverCheckedForegroundBrush}" />
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxPressForegroundBrush}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxDisabledForegroundBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxPressCheckedForegroundBrush}" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{tm:ThemeValue Key=CheckBoxDisabledForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>