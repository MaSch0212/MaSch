using MaSch.Generators;
using MaSch.Generators.Support;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using System.Collections.Immutable;

namespace Generators.Support.UnitTests;

[TestClass]
public class GeneratorTests : TestClassBase
{
    [TestMethod]
    public void AllFilesGenerated()
    {
        var compilation = CreateCompilation();
        var driver = CreateDriver(compilation, new Generator().AsSourceGenerator())
            .RunGeneratorsAndUpdateCompilation(compilation, out var outputCompilation, out var diagnostics);

        LogDiagnostics(driver.GetRunResult().Diagnostics);
        Assert.IsFalse(driver.GetRunResult().Diagnostics.Any(x => x.Severity >= DiagnosticSeverity.Warning), "Compilation has warnings and/or errors.");

        var generatedSources = driver.GetRunResult().Results.SelectMany(x => x.GeneratedSources).Select(x => (x.HintName, SourceText: x.SourceText.ToString()));
        var expectedSources = from file in Directory.EnumerateFiles("TestFiles/Generators.Support", "*", SearchOption.AllDirectories)
                              let expectedHintName = $"{Path.GetFileNameWithoutExtension(file)}.g.cs"
                              let expectedSourceText = SourceBuilder.AutoGeneratedFileHeader + File.ReadAllText(file)
                              select (HintName: expectedHintName, SourceText: expectedSourceText);
        Assert.AreCollectionsEquivalent(expectedSources, generatedSources);
    }

    private static Compilation CreateCompilation()
        => CSharpCompilation.Create(
            "compilation",
            Array.Empty<SyntaxTree>(),
            new[]
            {
                MetadataReference.CreateFromFile(typeof(string).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(ISourceGenerator).Assembly.Location),
            },
            new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

    private static GeneratorDriver CreateDriver(Compilation c, params ISourceGenerator[] generators)
        => CSharpGeneratorDriver.Create(
            generators,
            parseOptions: c.SyntaxTrees.FirstOrDefault()?.Options as CSharpParseOptions ?? new CSharpParseOptions(),
            additionalTexts: ImmutableArray<AdditionalText>.Empty);

    private static void LogDiagnostics(IEnumerable<Diagnostic> diagnostics)
    {
        Trace.WriteLine($"Diagnostics:\n{string.Join("\n", diagnostics.Select(x => x.ToString()))}");
    }
}