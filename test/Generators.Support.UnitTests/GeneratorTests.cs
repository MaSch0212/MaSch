using MaSch.Generators;
using MaSch.Generators.Support;
using MaSch.Test.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis;

namespace Generators.Support.UnitTests;

[TestClass]
public class GeneratorTests : TestClassBase
{
    private static readonly Assembly[] _assemblyReferences = new[]
    {
#if NETFRAMEWORK
        Assembly.Load("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"),
        Assembly.Load("netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51"),
        Assembly.Load("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"),
        Assembly.Load("System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"),
        Assembly.Load("System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"),
#elif NET
        Assembly.Load("System.Text.RegularExpressions"),
        Assembly.Load("System.Private.CoreLib"),
        Assembly.Load("System.Private.Xml"),
        Assembly.Load("System.Linq"),
        Assembly.Load("System.Runtime"),
        Assembly.Load("System.Runtime.Extensions"),
#endif
        Assembly.Load("System.Collections.Immutable"),
        typeof(ISourceGenerator).Assembly,
        typeof(Microsoft.CodeAnalysis.CSharp.CSharpCompilation).Assembly,
    };

    [TestMethod]
    public void AllFilesGenerated()
    {
        var result = CompilationBuilder.Create()
            .WithGenerator(new Generator())
            .WithReferences(_assemblyReferences)
            .Build();

        result.TraceDiagnostics();
        result.ValidateDiagnostics().HasNoErrors();

        var generatedSources = result.GeneratedSourceResults.Select(x => (x.HintName, SourceText: x.SourceText.ToString()));
        var expectedSources = from file in Directory.EnumerateFiles("TestFiles/Generators.Support", "*", SearchOption.AllDirectories)
                              let expectedHintName = $"{Path.GetFileNameWithoutExtension(file)}.g.cs"
                              let expectedSourceText = SourceBuilder.AutoGeneratedFileHeader + File.ReadAllText(file)
                              select (HintName: expectedHintName, SourceText: expectedSourceText);
        Assert.AreCollectionsEquivalent(expectedSources, generatedSources);
    }
}