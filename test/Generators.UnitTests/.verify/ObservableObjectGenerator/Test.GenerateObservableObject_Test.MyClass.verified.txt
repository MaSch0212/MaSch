//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Test
{
    partial class MyClass : global::MaSch.Core.Observable.IObservableObject
    {
        private global::System.Collections.Generic.Dictionary<string, global::MaSch.Core.Attributes.NotifyPropertyChangedAttribute> __attributes;
        private global::MaSch.Core.Observable.Modules.ObservableObjectModule __module;

        private global::System.Collections.Generic.Dictionary<string, global::MaSch.Core.Attributes.NotifyPropertyChangedAttribute> _attributes
            => __attributes ??= global::MaSch.Core.Attributes.NotifyPropertyChangedAttribute.InitializeAll(this);

        private global::MaSch.Core.Observable.Modules.ObservableObjectModule _module
            => __module ??= new global::MaSch.Core.Observable.Modules.ObservableObjectModule(this);

        /// <inheritdoc/>
        public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        /// <inheritdoc/>
        public virtual bool IsNotifyEnabled { get; set; } = true;

        /// <inheritdoc/>
        public virtual void SetProperty<T>(ref T property, T value, [global::System.Runtime.CompilerServices.CallerMemberNameAttribute] string propertyName = null)
        {
            if (_attributes.ContainsKey(propertyName))
            {
                _attributes[propertyName].UnsubscribeEvent(this);
            }
            property = value;
            NotifyPropertyChanged(propertyName);
            if (_attributes.ContainsKey(propertyName))
            {
                _attributes[propertyName].SubscribeEvent(this);
            }
        }

        /// <inheritdoc/>
        public virtual void NotifyPropertyChanged([global::System.Runtime.CompilerServices.CallerMemberNameAttribute] string propertyName = "", bool notifyDependencies = true)
        {
            if (IsNotifyEnabled)
            {
                PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
                if (notifyDependencies)
                {
                    _module.NotifyDependentProperties(propertyName);
                }
            }
        }

        /// <inheritdoc/>
        public virtual void NotifyCommandChanged([global::System.Runtime.CompilerServices.CallerMemberNameAttribute] string propertyName = "")
        {
            if (IsNotifyEnabled)
            {
                _module.NotifyCommandChanged(propertyName);
            }
        }
    }
}
