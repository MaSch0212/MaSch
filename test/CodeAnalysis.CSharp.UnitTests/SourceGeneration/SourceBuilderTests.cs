using MaSch.CodeAnalysis.CSharp.SourceGeneration;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Threading.Tasks;

namespace MaSch.CodeAnalysis.CSharp.UnitTests.SourceGeneration;

[TestClass]
public class SourceBuilderTests : SourceBuilderTestBase<ISourceBuilder>
{
    [TestMethod]
    [SourceBuilderOptions(IncludeFileHeader = true)]
    public void Create_DefaultOptions()
    {
        Assert.AreEqual(SourceBuilder.AutoGeneratedFileHeader, Builder.ToString());
    }

    [TestMethod]
    public void Create_WithoutHeader()
    {
        Assert.AreEqual(string.Empty, Builder.ToString());
    }

    [TestMethod]
    public async Task AppendRegion()
    {
        Builder.Append(Region("Test Region"), b => b.AppendLine("// Test Comment"));

        await VerifyBuilder();
    }

    [TestMethod]
    public async Task AppendBlock_WithoutContent()
    {
        Builder.Append(Block(), b => { });

        await VerifyBuilder();
    }

    [TestMethod]
    public async Task AppendBlock_WithContent_DefaultIndent()
    {
        Builder.Append(Block(), b => b.AppendLine("// Test Comment"));

        await VerifyBuilder();
    }

    [TestMethod]
    [SourceBuilderOptions(IndentSize = 2)]
    public async Task AppendBlock_WithContent_CustomIndent()
    {
        Builder.Append(Block(), b => b.AppendLine("// Test Comment"));

        await VerifyBuilder();
    }

    [TestMethod]
    public async Task AppendBlock_WithPrefix()
    {
        Builder.Append(Block("namespace Hello"), b => { });

        await VerifyBuilder();
    }

    [TestMethod]
    public async Task AppendBlock_WithSuffix()
    {
        Builder.Append(Block().WithSuffix(";"), b => { });

        await VerifyBuilder();
    }

    [TestMethod]
    public async Task AppendBlock_WithPrefixAndSuffix()
    {
        Builder.Append(Block("new string[]", ";"), b => { });

        await VerifyBuilder();
    }

    [TestMethod]
    [DataRow(CodeBlockStyle.NoLineBreaks)]
    [DataRow(CodeBlockStyle.EnsureBlockPrefixOnEmptyLine)]
    [DataRow(CodeBlockStyle.EnsureOpeningBracketOnEmptyLine)]
    [DataRow(CodeBlockStyle.AppendLineAfterOpeningBracket)]
    [DataRow(CodeBlockStyle.EnsureClosingBracketOnEmptyLine)]
    [DataRow(CodeBlockStyle.EnsureBlockSuffixOnEmptyLine)]
    [DataRow(CodeBlockStyle.AppendLineAfterBlock)]
    [DataRow(CodeBlockStyle.EnsureBracketSpacing)]
    public async Task AppendBlock_DifferentStyles(CodeBlockStyle style)
    {
        Builder.Append("/* Test */").Append(Block("new string[]", ";").WithStyle(style), b => b.Append("\"Test\""));

        await VerifyBuilder(style);
    }

    [TestMethod]
    public async Task AppendBlock_DifferentBrackets()
    {
        Builder.Append(Block().WithBrackets("[", "]"), b => { });

        await VerifyBuilder();
    }

    [TestMethod]
    public async Task Indent()
    {
        Builder.AppendLine("// Not indented");
        Builder.Indent(b => b.AppendLine("// Indented"));

        await VerifyBuilder();
    }

    [TestMethod]
    public async Task Indent_NoAutoNewLine()
    {
        Builder.Append("// Not indented");
        Builder.Indent(b => b.Append(" - extra content"));

        await VerifyBuilder();
    }

    [TestMethod]
    public async Task AppendLine()
    {
        Builder.AppendLine().Should().BeSameAs(Builder);
        Builder.AppendLine("// Test").Should().BeSameAs(Builder);

        await VerifyBuilder();
    }

    [TestMethod]
    [DataRow("", DisplayName = "Empty")]
    [DataRow("    ", DisplayName = "Only Spaces")]
    [DataRow("\t", DisplayName = "Only Tabs")]
    [DataRow("{", DisplayName = "Only opening squirly bracket")]
    [DataRow("    {", DisplayName = "Opening squirly bracket with spaces")]
    [DataRow("\t{", DisplayName = "Opening squirly bracket with tabs")]
    [DataRow("// Text", DisplayName = "Comment")]
    [DataRow("private string _test;", DisplayName = "Not empty line")]
    public async Task EnsurePreviousLineEmpty(string lineContent)
    {
        Builder.AppendLine(lineContent);
        Builder.EnsurePreviousLineEmpty().Should().BeSameAs(Builder);
        Builder.AppendLine("// Line above should be empty!");

        await VerifyBuilder(lineContent.Replace("\t", "\\t"));
    }

    [TestMethod]
    public async Task EnsurePreviousLineEmpty_CurrentLineNotEmpty()
    {
        Builder.Append("private string _test;");
        Builder.EnsurePreviousLineEmpty();
        Builder.AppendLine("// Line above should be empty!");

        await VerifyBuilder();
    }

    [TestMethod]
    [DataRow("", DisplayName = "Empty")]
    [DataRow("    ", DisplayName = "Only Spaces")]
    [DataRow("\t", DisplayName = "Only Tabs")]
    [DataRow("{", DisplayName = "Only opening squirly bracket")]
    [DataRow("    {", DisplayName = "Opening squirly bracket with spaces")]
    [DataRow("\t{", DisplayName = "Opening squirly bracket with tabs")]
    [DataRow("// Text", DisplayName = "Comment")]
    [DataRow("private string _test;", DisplayName = "Not empty line")]
    public async Task EnsureCurrentLineEmpty(string lineContent)
    {
        Builder.Append(lineContent);
        Builder.EnsureCurrentLineEmpty();
        Builder.AppendLine("// Current Line");
        Builder.AppendLine("// Next line");

        await VerifyBuilder(lineContent.Replace("\t", "\\t"));
    }

    [TestMethod]
    public async Task AppendInCodeBlock()
    {
        Builder.Append(Block(), b => b.Append("//").Append(' ').Append("Test"));

        await VerifyBuilder();
    }

    [TestMethod]
    public async Task ToSourceText()
    {
        Builder.Append(Block("namespace Test"), b => { });

        await Verify(Builder.ToSourceText());
    }
}
